// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pickup_points.sql

package db

import (
	"context"
)

const createPickupPoint = `-- name: CreatePickupPoint :one
INSERT INTO pickup_points (
  name,
  city,
  address
) VALUES (
  $1, $2, $3
) RETURNING id, name, city, address, registered_at
`

type CreatePickupPointParams struct {
	Name    string `json:"name"`
	City    string `json:"city"`
	Address string `json:"address"`
}

func (q *Queries) CreatePickupPoint(ctx context.Context, arg CreatePickupPointParams) (PickupPoint, error) {
	row := q.db.QueryRowContext(ctx, createPickupPoint, arg.Name, arg.City, arg.Address)
	var i PickupPoint
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.Address,
		&i.RegisteredAt,
	)
	return i, err
}

const deletePickupPoint = `-- name: DeletePickupPoint :exec
DELETE FROM pickup_points
WHERE id = $1
RETURNING id
`

func (q *Queries) DeletePickupPoint(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePickupPoint, id)
	return err
}

const getPickupPoint = `-- name: GetPickupPoint :one
SELECT id, name, city, address, registered_at FROM pickup_points 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPickupPoint(ctx context.Context, id int32) (PickupPoint, error) {
	row := q.db.QueryRowContext(ctx, getPickupPoint, id)
	var i PickupPoint
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.Address,
		&i.RegisteredAt,
	)
	return i, err
}

const listPickupPointsByCity = `-- name: ListPickupPointsByCity :many
SELECT id, name, city, address, registered_at FROM pickup_points 
WHERE city = $1 
ORDER BY registered_at DESC
`

func (q *Queries) ListPickupPointsByCity(ctx context.Context, city string) ([]PickupPoint, error) {
	rows, err := q.db.QueryContext(ctx, listPickupPointsByCity, city)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PickupPoint
	for rows.Next() {
		var i PickupPoint
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.City,
			&i.Address,
			&i.RegisteredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePickupPoint = `-- name: UpdatePickupPoint :one
UPDATE pickup_points 
SET 
  name = COALESCE($1, name),
  address = COALESCE($2, address)
WHERE id = $3
RETURNING id, name, city, address, registered_at
`

type UpdatePickupPointParams struct {
	Name    string `json:"name"`
	Address string `json:"address"`
	ID      int32  `json:"id"`
}

func (q *Queries) UpdatePickupPoint(ctx context.Context, arg UpdatePickupPointParams) (PickupPoint, error) {
	row := q.db.QueryRowContext(ctx, updatePickupPoint, arg.Name, arg.Address, arg.ID)
	var i PickupPoint
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.Address,
		&i.RegisteredAt,
	)
	return i, err
}
