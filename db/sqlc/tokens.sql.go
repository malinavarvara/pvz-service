// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package db

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
  user_id,
  token,
  expires_at
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, token, created_at, expires_at
`

type CreateTokenParams struct {
	UserID    int32     `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM tokens 
WHERE expires_at < CURRENT_TIMESTAMP 
RETURNING id, user_id, token, created_at, expires_at
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredTokens)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, user_id, token, created_at, expires_at FROM tokens 
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, token string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, token)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateTokenExpiry = `-- name: UpdateTokenExpiry :one
UPDATE tokens 
SET expires_at = $1
WHERE token = $2 AND expires_at > CURRENT_TIMESTAMP
RETURNING id, user_id, token, created_at, expires_at
`

type UpdateTokenExpiryParams struct {
	ExpiresAt time.Time `json:"expires_at"`
	Token     string    `json:"token"`
}

func (q *Queries) UpdateTokenExpiry(ctx context.Context, arg UpdateTokenExpiryParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, updateTokenExpiry, arg.ExpiresAt, arg.Token)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
