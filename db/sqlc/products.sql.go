// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package db

import (
	"context"
	"database/sql"
)

const addProduct = `-- name: AddProduct :one
INSERT INTO products (
  receiving_id,
  type,
  description,
  avito_order_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, receiving_id, added_at, type, description, avito_order_id
`

type AddProductParams struct {
	ReceivingID  int32          `json:"receiving_id"`
	Type         string         `json:"type"`
	Description  sql.NullString `json:"description"`
	AvitoOrderID string         `json:"avito_order_id"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addProduct,
		arg.ReceivingID,
		arg.Type,
		arg.Description,
		arg.AvitoOrderID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ReceivingID,
		&i.AddedAt,
		&i.Type,
		&i.Description,
		&i.AvitoOrderID,
	)
	return i, err
}

const deleteLastProduct = `-- name: DeleteLastProduct :one
DELETE FROM products AS p
WHERE p.id = (
  SELECT id FROM products AS p2
  WHERE p2.receiving_id = $1
  ORDER BY p2.added_at DESC
  LIMIT 1
)
RETURNING id, receiving_id, added_at, type, description, avito_order_id
`

func (q *Queries) DeleteLastProduct(ctx context.Context, receivingID int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteLastProduct, receivingID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ReceivingID,
		&i.AddedAt,
		&i.Type,
		&i.Description,
		&i.AvitoOrderID,
	)
	return i, err
}

const getLastProduct = `-- name: GetLastProduct :one
SELECT id, receiving_id, added_at, type, description, avito_order_id FROM products 
WHERE receiving_id = $1 
ORDER BY added_at DESC 
LIMIT 1
`

func (q *Queries) GetLastProduct(ctx context.Context, receivingID int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getLastProduct, receivingID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ReceivingID,
		&i.AddedAt,
		&i.Type,
		&i.Description,
		&i.AvitoOrderID,
	)
	return i, err
}

const listProductsInReceiving = `-- name: ListProductsInReceiving :many
SELECT id, receiving_id, added_at, type, description, avito_order_id FROM products 
WHERE receiving_id = $1 
ORDER BY added_at ASC
`

func (q *Queries) ListProductsInReceiving(ctx context.Context, receivingID int32) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsInReceiving, receivingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ReceivingID,
			&i.AddedAt,
			&i.Type,
			&i.Description,
			&i.AvitoOrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products AS p
SET
    type = COALESCE($1, p.type),
    description = COALESCE($2, p.description)
WHERE p.id = $3 AND p.receiving_id IN (
    SELECT r.id FROM receivings AS r
    WHERE r.status = 'in_progress' AND r.pickup_point_id = $4
)
RETURNING id, receiving_id, added_at, type, description, avito_order_id
`

type UpdateProductParams struct {
	Type          string         `json:"type"`
	Description   sql.NullString `json:"description"`
	ID            int32          `json:"id"`
	PickupPointID int32          `json:"pickup_point_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Type,
		arg.Description,
		arg.ID,
		arg.PickupPointID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ReceivingID,
		&i.AddedAt,
		&i.Type,
		&i.Description,
		&i.AvitoOrderID,
	)
	return i, err
}
