// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: receivings.sql

package db

import (
	"context"
)

const closeReceiving = `-- name: CloseReceiving :one
UPDATE receivings 
SET 
  status = 'closed',
  closed_at = CURRENT_TIMESTAMP
WHERE id = $1 
RETURNING id, pickup_point_id, started_at, closed_at, status
`

func (q *Queries) CloseReceiving(ctx context.Context, id int32) (Receiving, error) {
	row := q.db.QueryRowContext(ctx, closeReceiving, id)
	var i Receiving
	err := row.Scan(
		&i.ID,
		&i.PickupPointID,
		&i.StartedAt,
		&i.ClosedAt,
		&i.Status,
	)
	return i, err
}

const createReceiving = `-- name: CreateReceiving :one
INSERT INTO receivings (pickup_point_id, status)
VALUES ($1, $2)
RETURNING id, pickup_point_id, started_at, closed_at, status
`

type CreateReceivingParams struct {
	PickupPointID int32  `json:"pickup_point_id"`
	Status        string `json:"status"`
}

func (q *Queries) CreateReceiving(ctx context.Context, arg CreateReceivingParams) (Receiving, error) {
	row := q.db.QueryRowContext(ctx, createReceiving, arg.PickupPointID, arg.Status)
	var i Receiving
	err := row.Scan(
		&i.ID,
		&i.PickupPointID,
		&i.StartedAt,
		&i.ClosedAt,
		&i.Status,
	)
	return i, err
}

const deleteAllProductsFromReceiving = `-- name: DeleteAllProductsFromReceiving :exec
DELETE FROM products
WHERE receiving_id = $1
`

func (q *Queries) DeleteAllProductsFromReceiving(ctx context.Context, receivingID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllProductsFromReceiving, receivingID)
	return err
}

const deleteEmptyReceiving = `-- name: DeleteEmptyReceiving :exec
DELETE FROM receivings AS r
WHERE r.id = $1 AND r.status = 'in_progress'
AND NOT EXISTS (
  SELECT 1 FROM products WHERE receiving_id = $1
)
`

func (q *Queries) DeleteEmptyReceiving(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmptyReceiving, id)
	return err
}

const getActiveReceiving = `-- name: GetActiveReceiving :one
SELECT id, pickup_point_id, started_at, closed_at, status FROM receivings 
WHERE pickup_point_id = $1 AND status = 'in_progress'
LIMIT 1
`

func (q *Queries) GetActiveReceiving(ctx context.Context, pickupPointID int32) (Receiving, error) {
	row := q.db.QueryRowContext(ctx, getActiveReceiving, pickupPointID)
	var i Receiving
	err := row.Scan(
		&i.ID,
		&i.PickupPointID,
		&i.StartedAt,
		&i.ClosedAt,
		&i.Status,
	)
	return i, err
}

const startReceiving = `-- name: StartReceiving :one
INSERT INTO receivings (
  pickup_point_id,
  status
) VALUES (
  $1, 'in_progress'
) RETURNING id, pickup_point_id, started_at, closed_at, status
`

func (q *Queries) StartReceiving(ctx context.Context, pickupPointID int32) (Receiving, error) {
	row := q.db.QueryRowContext(ctx, startReceiving, pickupPointID)
	var i Receiving
	err := row.Scan(
		&i.ID,
		&i.PickupPointID,
		&i.StartedAt,
		&i.ClosedAt,
		&i.Status,
	)
	return i, err
}

const updateReceivingStatus = `-- name: UpdateReceivingStatus :one
UPDATE receivings 
SET
  status = $1::varchar, -- Явное указание типа
  closed_at = CASE WHEN $1::varchar = 'closed' THEN NOW() ELSE NULL END
WHERE id = $2::bigint  -- Явное указание типа для ID
RETURNING id, pickup_point_id, started_at, closed_at, status
`

type UpdateReceivingStatusParams struct {
	Status string `json:"column_1"`
	ID int32  `json:"column_2"`
}

func (q *Queries) UpdateReceivingStatus(ctx context.Context, arg UpdateReceivingStatusParams) (Receiving, error) {
	row := q.db.QueryRowContext(ctx, updateReceivingStatus, arg.Status, arg.ID)
	var i Receiving
	err := row.Scan(
		&i.ID,
		&i.PickupPointID,
		&i.StartedAt,
		&i.ClosedAt,
		&i.Status,
	)
	return i, err
}
